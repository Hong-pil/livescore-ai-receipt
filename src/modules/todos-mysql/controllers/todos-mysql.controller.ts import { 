// src/modules/todos-mysql/controllers/todos-mysql.controller.ts
import { 
  Controller, 
  Get, 
  Post, 
  Put, 
  Patch, 
  Delete, 
  Body, 
  Param, 
  Query,
  HttpCode,
  HttpStatus,
  ParseIntPipe 
} from '@nestjs/common';
import { 
  ApiTags, 
  ApiOperation, 
  ApiResponse, 
  ApiQuery,
  ApiParam,
  ApiBody 
} from '@nestjs/swagger';
import { TodosMySQLService } from '../services/todos-mysql.service';
import { CreateTodoMySQLDto } from '../dtos/create-todo-mysql.dto';
import { UpdateTodoMySQLDto } from '../dtos/update-todo-mysql.dto';
import { TodoStatus, TodoPriority } from '../entities/todo-mysql.entity';

@ApiTags('🗄️ Todos MySQL - 할 일 관리 (MySQL)')
@Controller('/api/v1/todos-mysql')
export class TodosMySQLController {
  constructor(private readonly todosMySQLService: TodosMySQLService) {}

  @Post()
  @ApiOperation({
    summary: '✅ 새 할 일 생성',
    description: '새로운 할 일을 MySQL에 생성합니다.',
  })
  @ApiResponse({ 
    status: 201, 
    description: '할 일이 성공적으로 생성되었습니다.',
  })
  @ApiBody({ 
    type: CreateTodoMySQLDto,
    examples: {
      basicTodo: {
        summary: '기본 할 일',
        value: {
          title: 'MySQL 데이터베이스 설계',
          description: 'ERD 작성 및 테이블 구조 설계',
          priority: 'medium',
          tags: ['DB', 'MySQL']
        }
      },
      urgentTodo: {
        summary: '긴급 할 일',
        value: {
          title: '서버 배포 준비',
          description: 'Docker 설정 및 배포 스크립트 작성',
          status: 'in_progress',
          priority: 'urgent',
          dueDate: '2025-02-01',
          isFavorite: true,
          tags: ['배포', 'DevOps']
        }
      }
    }
  })
  async create(@Body() createDto: CreateTodoMySQLDto) {
    const createdTodo = await this.todosMySQLService.create(createDto);
    return {
      success: true,
      data: createdTodo,
      message: '할 일이 생성되었습니다.'
    };
  }

  @Get()
  @ApiOperation({
    summary: '📋 할 일 목록 조회',
    description: '할 일 목록을 페이지네이션으로 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '할 일 목록이 성공적으로 조회되었습니다.',
  })
  @ApiQuery({
    name: 'skip',
    required: false,
    type: Number,
    default: 0,
    description: '건너뛸 항목 수',
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    default: 20,
    description: '조회할 항목 수',
  })
  async getAll(
    @Query('skip') skip: number = 0,
    @Query('limit') limit: number = 20,
  ) {
    const todos = await this.todosMySQLService.getAll(Number(skip), Number(limit));
    return {
      success: true,
      data: todos,
      message: '할 일 목록이 조회되었습니다.'
    };
  }

  @Get('statistics')
  @ApiOperation({
    summary: '📊 할 일 통계 조회',
    description: '할 일의 상태별, 우선순위별 통계를 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '통계가 성공적으로 조회되었습니다.',
  })
  async getStatistics() {
    const stats = await this.todosMySQLService.getStatistics();
    return {
      success: true,
      data: stats,
      message: '할 일 통계가 조회되었습니다.'
    };
  }

  @Get('status/:status')
  @ApiOperation({
    summary: '🎯 상태별 할 일 조회',
    description: '특정 상태의 할 일들을 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '상태별 할 일이 성공적으로 조회되었습니다.',
  })
  @ApiParam({
    name: 'status',
    enum: TodoStatus,
    description: '할 일 상태',
    example: TodoStatus.PENDING
  })
  async getByStatus(@Param('status') status: TodoStatus) {
    const todos = await this.todosMySQLService.getByStatus(status);
    return {
      success: true,
      data: { results: todos, totalCount: todos.length },
      message: `${status} 상태의 할 일이 조회되었습니다.`
    };
  }

  @Get('priority/:priority')
  @ApiOperation({
    summary: '⚡ 우선순위별 할 일 조회',
    description: '특정 우선순위의 할 일들을 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '우선순위별 할 일이 성공적으로 조회되었습니다.',
  })
  @ApiParam({
    name: 'priority',
    enum: TodoPriority,
    description: '우선순위',
    example: TodoPriority.HIGH
  })
  async getByPriority(@Param('priority') priority: TodoPriority) {
    const todos = await this.todosMySQLService.getByPriority(priority);
    return {
      success: true,
      data: { results: todos, totalCount: todos.length },
      message: `${priority} 우선순위의 할 일이 조회되었습니다.`
    };
  }

  @Get('favorites')
  @ApiOperation({
    summary: '⭐ 즐겨찾기 할 일 조회',
    description: '즐겨찾기로 설정된 할 일들을 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '즐겨찾기 할 일이 성공적으로 조회되었습니다.',
  })
  async getFavorites() {
    const todos = await this.todosMySQLService.getFavorites();
    return {
      success: true,
      data: { results: todos, totalCount: todos.length },
      message: '즐겨찾기 할 일이 조회되었습니다.'
    };
  }

  @Get('overdue')
  @ApiOperation({
    summary: '⏰ 기한 초과 할 일 조회',
    description: '마감일이 지난 할 일들을 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '기한 초과 할 일이 성공적으로 조회되었습니다.',
  })
  async getOverdueTodos() {
    const todos = await this.todosMySQLService.getOverdueTodos();
    return {
      success: true,
      data: { results: todos, totalCount: todos.length },
      message: '기한 초과 할 일이 조회되었습니다.'
    };
  }

  @Get('search')
  @ApiOperation({
    summary: '🔍 할 일 검색',
    description: '제목으로 할 일을 검색합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '검색이 성공적으로 완료되었습니다.',
  })
  @ApiQuery({
    name: 'q',
    required: true,
    type: String,
    description: '검색어',
    example: 'MySQL'
  })
  async searchByTitle(@Query('q') searchTerm: string) {
    const todos = await this.todosMySQLService.searchByTitle(searchTerm);
    return {
      success: true,
      data: { results: todos, totalCount: todos.length },
      message: `'${searchTerm}' 검색 결과입니다.`
    };
  }

  @Get(':id')
  @ApiOperation({
    summary: '👁️ 할 일 상세 조회',
    description: '특정 할 일의 상세 정보를 조회합니다.',
  })
  @ApiResponse({ 
    status: 200, 
    description: '할 일 상세 정보가 성공적으로 조회되었습니다.',
  })
  @ApiParam({
    name: